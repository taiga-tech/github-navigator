name: 'Continuous Integration'

on:
    push:
        branches: [main, develop, 'feature/*']
    pull_request:
        branches: [main, develop]

env:
    # Use Node.js 18.x for better compatibility
    NODE_VERSION: '18.x'
    # Use specific pnpm version for consistency
    PNPM_VERSION: '10.13.1'

jobs:
    # Job 1: Code Quality Checks
    quality:
        name: 'Code Quality'
        runs-on: ubuntu-latest
        timeout-minutes: 10

        steps:
            - name: 'Checkout repository'
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Full history for better analysis

            - name: 'Setup pnpm'
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: 'Setup Node.js'
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: 'Install dependencies'
              run: pnpm install --frozen-lockfile

            - name: 'Type checking'
              run: pnpm typecheck

            - name: 'Lint checking'
              run: pnpm lint

            - name: 'Format checking'
              run: pnpm format --check

    # Job 2: Unit Tests
    test:
        name: 'Unit Tests'
        runs-on: ubuntu-latest
        timeout-minutes: 15

        steps:
            - name: 'Checkout repository'
              uses: actions/checkout@v4

            - name: 'Setup pnpm'
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: 'Setup Node.js'
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: 'Install dependencies'
              run: pnpm install --frozen-lockfile

            - name: 'Run tests with coverage'
              run: pnpm test:coverage

            - name: 'Upload coverage to Codecov'
              uses: codecov/codecov-action@v4
              if: success()
              with:
                  directory: ./coverage
                  fail_ci_if_error: false
                  verbose: true

    # Job 3: Build Testing
    build:
        name: 'Build Testing'
        runs-on: ubuntu-latest
        timeout-minutes: 20
        needs: [quality, test] # Run after quality and test jobs pass

        strategy:
            matrix:
                build-type: ['plasmo', 'next', 'combined']

        steps:
            - name: 'Checkout repository'
              uses: actions/checkout@v4

            - name: 'Setup pnpm'
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: 'Setup Node.js'
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: 'Install dependencies'
              run: pnpm install --frozen-lockfile

            - name: 'Build Plasmo extension'
              if: matrix.build-type == 'plasmo' || matrix.build-type == 'combined'
              run: pnpm build:plasmo

            - name: 'Build Next.js app'
              if: matrix.build-type == 'next' || matrix.build-type == 'combined'
              run: pnpm build:next

            - name: 'Build combined (production)'
              if: matrix.build-type == 'combined'
              run: pnpm build

            - name: 'Verify build artifacts'
              run: |
                  echo "Checking build artifacts..."
                  if [ "${{ matrix.build-type }}" = "plasmo" ] || [ "${{ matrix.build-type }}" = "combined" ]; then
                    if [ ! -d "build/chrome-mv3-prod" ]; then
                      echo "‚ùå Plasmo build artifacts not found"
                      exit 1
                    fi
                    echo "‚úÖ Plasmo build artifacts found"
                  fi

                  if [ "${{ matrix.build-type }}" = "next" ] || [ "${{ matrix.build-type }}" = "combined" ]; then
                    if [ ! -d ".next" ]; then
                      echo "‚ùå Next.js build artifacts not found"
                      exit 1
                    fi
                    echo "‚úÖ Next.js build artifacts found"
                  fi

            - name: 'Upload build artifacts'
              uses: actions/upload-artifact@v4
              if: matrix.build-type == 'combined'
              with:
                  name: build-artifacts-${{ github.sha }}
                  path: |
                      build/chrome-mv3-prod/
                      .next/
                  retention-days: 7

    # Job 4: Security Scan
    security:
        name: 'Security Scan'
        runs-on: ubuntu-latest
        timeout-minutes: 10

        steps:
            - name: 'Checkout repository'
              uses: actions/checkout@v4

            - name: 'Setup pnpm'
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: 'Setup Node.js'
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: 'Install dependencies'
              run: pnpm install --frozen-lockfile

            - name: 'Run security audit'
              run: pnpm audit --audit-level moderate

            - name: 'Check for known vulnerabilities'
              run: |
                  echo "Checking for sensitive files..."
                  if [ -f ".env" ]; then
                    echo "‚ùå .env file found in repository!"
                    exit 1
                  fi
                  echo "‚úÖ No sensitive files found"

    # Job 5: Package Testing (Chrome Extension)
    package:
        name: 'Package Testing'
        runs-on: ubuntu-latest
        timeout-minutes: 15
        needs: [build]
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

        steps:
            - name: 'Checkout repository'
              uses: actions/checkout@v4

            - name: 'Setup pnpm'
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: 'Setup Node.js'
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: 'Install dependencies'
              run: pnpm install --frozen-lockfile

            - name: 'Build extension'
              run: pnpm build:plasmo

            - name: 'Package extension'
              run: |
                  # Create zip package for Chrome Extension
                  cd build/chrome-mv3-prod
                  zip -r ../chrome-mv3-prod.zip .
                  cd ../..

                  echo "Package created: build/chrome-mv3-prod.zip"
                  ls -la build/

            - name: 'Validate manifest.json'
              run: |
                  echo "Validating manifest.json..."
                  if [ ! -f "build/chrome-mv3-prod/manifest.json" ]; then
                    echo "‚ùå manifest.json not found"
                    exit 1
                  fi

                  # Basic manifest validation
                  node -e "
                    const manifest = require('./build/chrome-mv3-prod/manifest.json');
                    if (!manifest.name || !manifest.version || !manifest.manifest_version) {
                      console.error('‚ùå Invalid manifest.json structure');
                      process.exit(1);
                    }
                    console.log('‚úÖ manifest.json is valid');
                    console.log('Extension:', manifest.name, 'v' + manifest.version);
                  "

            - name: 'Upload package'
              uses: actions/upload-artifact@v4
              with:
                  name: chrome-extension-${{ github.sha }}
                  path: build/chrome-mv3-prod.zip
                  retention-days: 30

    # Job 6: Performance Testing
    performance:
        name: 'Performance Testing'
        runs-on: ubuntu-latest
        timeout-minutes: 15
        needs: [build]
        if: github.event_name == 'pull_request'

        steps:
            - name: 'Checkout repository'
              uses: actions/checkout@v4

            - name: 'Setup pnpm'
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: 'Setup Node.js'
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: 'Install dependencies'
              run: pnpm install --frozen-lockfile

            - name: 'Build for performance testing'
              run: pnpm build

            - name: 'Analyze bundle size'
              run: |
                  echo "Analyzing bundle sizes..."

                  # Check Plasmo build size
                  if [ -d "build/chrome-mv3-prod" ]; then
                    PLASMO_SIZE=$(du -sh build/chrome-mv3-prod | cut -f1)
                    echo "üì¶ Plasmo build size: $PLASMO_SIZE"
                  fi

                  # Check Next.js build size
                  if [ -d ".next" ]; then
                    NEXT_SIZE=$(du -sh .next | cut -f1)
                    echo "üì¶ Next.js build size: $NEXT_SIZE"
                  fi

                  # Check for large files (>1MB)
                  echo "Checking for large files..."
                  find build/ .next/ -type f -size +1M 2>/dev/null | while read file; do
                    size=$(du -sh "$file" | cut -f1)
                    echo "‚ö†Ô∏è  Large file: $file ($size)"
                  done || echo "‚úÖ No large files found"

    # Job 7: Notification
    notify:
        name: 'Notify Results'
        runs-on: ubuntu-latest
        needs: [quality, test, build, security]
        if: always()

        steps:
            - name: 'Check job results'
              run: |
                  echo "CI Pipeline Results:"
                  echo "Quality: ${{ needs.quality.result }}"
                  echo "Tests: ${{ needs.test.result }}"
                  echo "Build: ${{ needs.build.result }}"
                  echo "Security: ${{ needs.security.result }}"

                  if [ "${{ needs.quality.result }}" = "failure" ] || [ "${{ needs.test.result }}" = "failure" ] || [ "${{ needs.build.result }}" = "failure" ] || [ "${{ needs.security.result }}" = "failure" ]; then
                    echo "‚ùå CI Pipeline failed"
                    exit 1
                  else
                    echo "‚úÖ CI Pipeline passed"
                  fi
